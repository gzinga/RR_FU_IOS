// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections;
using System.IO;

namespace FUCounter_App
{
	public partial class LoadViewController : UIViewController
	{
		public string FileToLoad = "";

		public LoadViewController (IntPtr handle) : base (handle)
		{

		}


		public void ReloadListOfFiles()
		{
			ArrayList tableList = new ArrayList ();
			var doc = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);
			var allFIles = Directory.EnumerateFiles (doc);

			foreach (string file in allFIles) {
				string[] splits = file.Split ('/');
				string[] extension = (splits[splits.Length - 1]).Split('.');
				if ((extension [1].CompareTo ("xml")) ==  0) {
					tableList.Add (splits [splits.Length - 1]);
				}
			}
			String[] tableItems1 = (String[]) tableList.ToArray( typeof( string ) );
			TableListFiles.Source = new TableSource (tableItems1);
			TableListFiles.ReloadData ();
			((TableSource)TableListFiles.Source).RowSelectedCallback = RowSelected;
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Perform any additional setup after loading the view, typically from a nib.
			// loads the table
			ReloadListOfFiles ();
		}

		partial void LoadSelectedRecord (UIButton sender)
		{
			TableSource source = (TableSource)TableListFiles.Source;
			var doc = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);
			int selectedRow = source.GetLastSelectedRow();
			if (selectedRow == -1){
				UIAlertView alert = new UIAlertView ("File Selection", "Please Select a File", null, "OK", null);
				alert.Show();
				return;
			}
			FileToLoad = doc + "/" + (source.GetAllRows())[selectedRow];
			//this.DismissViewController(true,null);
		}


		public void RowSelected(int rowNum)
		{
			LoadSelectedRecord (null);
			LoadFile ();
		}

		public void LoadFile()
		{
			if (FileToLoad == null || FileToLoad == ".xml") {
					return;
			}
			if (FileToLoad == string.Empty) {
				UIAlertView alert = new UIAlertView ("File Load", "You did not select a file to load", null, "OK", null);
				alert.Show();
				return;
			}
			Type[] extraTypes = {typeof(GroupData),typeof(GraftRecord)};
			System.Xml.Serialization.XmlSerializer reader = 
				new System.Xml.Serialization.XmlSerializer(typeof(CaseCount),extraTypes);

			System.IO.StreamReader file = new System.IO.StreamReader(FileToLoad);
			CaseCount MasterRecord = (CaseCount)reader.Deserialize(file);
			file.Close();

			// update UI
			LabelPatientID.Text = string.Format ("Patiend ID: {0}", MasterRecord.PatientID);
			LabelDXRate.Text = string.Format("Total Discard Rate: {0:0.0}" , 100.0*(double)MasterRecord.totalDX/(double)MasterRecord.TotalNumberOfGrafts);
			LabelNumGrafts.Text = string.Format ("Total Number of Grafts: {0}", MasterRecord.TotalNumberOfGrafts);
			LabelTXRate.Text = string.Format ("Total Transection Rate: {0:0.0}" , MasterRecord.totalTX);
			LabelProcedureDate.Text = "Procedure Date: " + MasterRecord.Date;
			//TextBoxProtocol.Text = MasterRecord.

		}

		partial void GoHome (UIButton sender)
		{
			// finds the latest saved file within the day


		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			((FUCounter_AppViewController)segue.DestinationViewController).SetFileToLoad(FileToLoad);
		}

		partial void DeleteRecord (UIButton sender)
		{
			TableSource source = (TableSource)TableListFiles.Source;
			var doc = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);
			int selectedRow = source.GetLastSelectedRow();
			if (selectedRow == -1){
				UIAlertView alert = new UIAlertView ("File Selection", "Please Select a File", null, "OK", null);
				alert.Show();
				return;
			}
			string FileToDelete = doc + "/" + (source.GetAllRows())[selectedRow];
			// deletes the file
			File.Delete(FileToDelete);
			ReloadListOfFiles ();
		}

		public void SetHomeButton(string filetoLoad)
		{
			FileToLoad = filetoLoad;
		}
	}
}
